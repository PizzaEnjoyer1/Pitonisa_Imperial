import os
import streamlit as st
from PIL import Image as Image, ImageOps as ImagOps
import glob
from gtts import gTTS
import os
import time
from streamlit_lottie import st_lottie
import pytesseract
import cv2
import glob
from streamlit_drawable_canvas import st_canvas
import numpy as np
import pandas as pd

with st.sidebar:

  st.title("Cambia los par치metros del canvas")
  
  drawing_mode = "freedraw"

  stroke_width = st.slider("Grosor del pincel", 1, 100, 10)

  stroke_color = st.color_picker("Selecciona el color de linea", "#000000")
  
def analizar_destino_maya(nombre):
    nombre = nombre.upper().strip()
    
    # 1. An치lisis por inicial - Determina el camino principal
    destinos_principales = {
        'A': "los cristales de datos antiguos revelan que ser치s pionero en la fusi칩n entre tecnolog칤a org치nica y conocimiento ancestral",
        'B': "las profec칤as binarias indican que desarrollar치s un nuevo tipo de interfaz neural que revolucionar치 la conexi칩n con los dioses digitales",
        # ... [resto de destinos principales igual]
    }
    
    # 2. An치lisis por suma ASCII - Determina el tiempo y la intensidad
    suma_ascii = sum(ord(c) for c in nombre)
    ciclo_lunar = suma_ascii % 13 + 1
    intensidad = suma_ascii % 4
    
    # 3. Nuevo: An치lisis por vocales - Determina los desaf칤os
    vocales = sum(1 for c in nombre if c in 'AEIOU')
    desafios = {
        0: "Deber치s superar las interferencias en la matriz temporal antes de alcanzar tu destino",
        1: "Los guardianes digitales pondr치n a prueba tu determinaci칩n en el camino",
        2: "Las fluctuaciones cu치nticas en la red neural maya presentar치n obst치culos que fortalecer치n tu esp칤ritu",
        3: "Los antiguos virus del sistema intentar치n desviar tu camino",
        4: "Las paradojas temporales intentar치n confundir tu b칰squeda",
        5: "Los firewalls ancestrales requerir치n de toda tu astucia para ser superados"
    }
    
    # 4. Nuevo: An치lisis por consonantes - Determina los aliados
    consonantes = sum(1 for c in nombre if c not in 'AEIOU')
    aliados = {
        0: "Los chamanes digitales te guiar치n en momentos de duda",
        1: "Un antiguo maestro de la bio-computaci칩n ser치 tu mentor",
        2: "Los esp칤ritus de la red neural maya te acompa침ar치n",
        3: "Una inteligencia artificial ancestral te brindar치 su sabidur칤a",
        4: "Los guardianes de los cristales de datos ser치n tus protectores",
        5: "Los arquitectos del c칩digo sagrado compartir치n sus secretos contigo"
    }
    
    # 5. Nuevo: An치lisis por longitud del nombre - Determina el elemento tecnol칩gico
    elementos = {
        3: "el cristal de datos ser치 tu herramienta principal",
        4: "los nanobots ancestrales amplificar치n tus habilidades",
        5: "el tejido cu치ntico responder치 a tu voluntad",
        6: "las interfaces neurales aumentar치n tu percepci칩n",
        7: "los hologramas sagrados manifestar치n tu poder",
        8: "los campos de fuerza maya te proteger치n",
        9: "los portales dimensionales se abrir치n a tu paso"
    }
    elemento = elementos.get(len(nombre), "los artefactos antiguos resonar치n con tu energ칤a")
    
    # 6. Nuevo: An치lisis por 칰ltima letra - Determina el legado
    legados = {
        'A': "Tus descubrimientos inspirar치n a las futuras generaciones de tecnomantes",
        'E': "Tu c칩digo ser치 estudiado en las academias sagradas por milenios",
        'I': "Tus innovaciones cambiar치n la forma en que entendemos la realidad virtual",
        'O': "Tu sabidur칤a digital ser치 preservada en los cristales eternos",
        'U': "Tus creaciones trascender치n los l칤mites del tiempo y el espacio",
    }
    legado = legados.get(nombre[-1], "Tu impacto en la matriz maya ser치 recordado por generaciones")
    
    # Construir la predicci칩n extendida
    prediccion = f"""
    {nombre}, {destinos_principales.get(nombre[0], "los antiguos algoritmos predicen grandes cambios en tu destino")}.
    
    En tu camino, {desafios.get(vocales, "m칰ltiples desaf칤os pondr치n a prueba tu determinaci칩n")}. 
    Sin embargo, no estar치s solo: {aliados.get(consonantes, "fuerzas m칤sticas te acompa침ar치n")}.
    
    Los or치culos binarios han revelado que {elemento}.
    
    Este destino se manifestar치 {tiempos[ciclo_lunar]}. {intensidades[intensidad]}. 
    
    {impactos[len(nombre) > 6]}
    
    Y as칤 est치 escrito: {legado}.
    """
    
    return prediccion.strip() 

st.title('Pitonisa Imperial: Descubre tu destino')
image = Image.open('pitonisa.jpg')
st.image(image)

st.subheader("Escribe tu nombre en el canvas")


# Create a canvas component
canvas_result = st_canvas(
    fill_color= "white",  # Fixed fill color with some opacity
    stroke_width=stroke_width,
    stroke_color=stroke_color,
    background_color="white",
    height=720,
    width=1280,
    #background_image= None #Image.open(bg_image) if bg_image else None,
    drawing_mode=drawing_mode,
    key="canvas",
)



if canvas_result.image_data is not None:
    with st.spinner("Analizando..."):
        try:
            # Obtener el array numpy directamente del canvas
            input_numpy_array = np.array(canvas_result.image_data)
            
            # Convertir de RGBA a RGB
            rgb_array = input_numpy_array[:, :, :3]
            
            # Convertir a escala de grises
            gray_array = cv2.cvtColor(rgb_array, cv2.COLOR_RGB2GRAY)
            
            # Aplicar umbralizaci칩n
            _, threshold = cv2.threshold(gray_array, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            
            # Realizar OCR y procesar el texto
            text = pytesseract.image_to_string(threshold)
            
            # Limpiar y formatear el texto en una l칤nea
            cleaned_text = ' '.join(
                word.strip()
                for line in text.splitlines()
                for word in line.split()
                if word.strip()
            )
            
            if cleaned_text:
                st.write("Nombre detectado:", cleaned_text)
                prediccion = analizar_destino_maya(cleaned_text)
                st.markdown(f"### 游댩 Los cristales de datos han hablado:\n\n{prediccion}")
            else:
                st.write("No se detect칩 texto en la imagen")
                
        except Exception as e:
            st.error(f"Error procesando la imagen: {str(e)}")


